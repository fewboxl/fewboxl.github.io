(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[355],{58177:function(e,r,n){"use strict";var t,o,s=n(67294);function i(){return(i=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}r.Z=function(e){return s.createElement("svg",i({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 256 256",fill:"none"},e),t||(t=s.createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M28 100h128v56H55v16h29v56H28V100zm72 72v56h128V100h-56v56h27v16h-99zM84 28H28v56h56V28zm16 0v56h72V28h-72z",fill:"currentColor"})),o||(o=s.createElement("path",{fill:"currentColor",d:"M28 228V28h56v200z"})))}},74950:function(e,r,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/document",function(){return n(17550)}])},24694:function(e,r,n){"use strict";n.d(r,{Z:function(){return S}});var t,o,s=n(85893),i=n(67294),a=n(7044),l=n(9008),c=n.n(l),p=n(58177),d=n(44012),m=n(41664),u=n.n(m);class g extends i.PureComponent{render(){return this.state.isHover?(0,s.jsx)(a.U.Components.VAnimation,{category:a.U.Components.AnimationCategory.Pulse,repeat:a.U.Components.AnimationRepeat.Infinite,children:(0,s.jsx)(a.U.Components.VLabel,{frontColor:this.state.isHover?a.U.Components.ColorType.White:a.U.Components.ColorType.Light,onMouseEnter:()=>{this.setState({isHover:!0})},onMouseLeave:()=>{this.setState({isHover:!1})},caption:this.props.caption})}):(0,s.jsx)(a.U.Components.VLabel,{frontColor:a.U.Components.ColorType.Light,onMouseEnter:()=>{this.setState({isHover:!0})},onMouseLeave:()=>{this.setState({isHover:!1})},caption:this.props.caption})}constructor(e){super(e),this.state={isHover:!1}}}class h extends i.PureComponent{render(){return this.state.isHover?(0,s.jsx)(a.U.Components.VAnimation,{category:a.U.Components.AnimationCategory.Pulse,repeat:a.U.Components.AnimationRepeat.Infinite,children:(0,s.jsx)(a.U.Components.VLabel,{padding:"0.5em 0.8em",borderRadius:"2em",backgroundColor:a.U.Components.ColorType.Light,frontColor:this.state.isHover?a.U.Components.ColorType.Black:a.U.Components.ColorType.Dark,onMouseEnter:()=>{this.setState({isHover:!0})},onMouseLeave:()=>{this.setState({isHover:!1})},caption:this.props.caption})}):(0,s.jsx)(a.U.Components.VLabel,{padding:"0.5em 0.8em",borderRadius:"2em",backgroundColor:a.U.Components.ColorType.Light,frontColor:this.state.isHover?a.U.Components.ColorType.Black:a.U.Components.ColorType.Dark,onMouseEnter:()=>{this.setState({isHover:!0})},onMouseLeave:()=>{this.setState({isHover:!1})},caption:this.props.caption})}constructor(e){super(e),this.state={isHover:!1}}}class f extends i.PureComponent{render(){return(0,s.jsx)(a.U.Components.VHeader,{padding:"2em 0",children:(0,s.jsxs)(a.U.Components.XBetween,{children:[(0,s.jsx)(u(),{href:"/",children:(0,s.jsx)(a.U.Components.VSvg,{frontColor:a.U.Components.ColorType.White,children:(0,s.jsx)(p.Z,{})})}),(0,s.jsxs)(a.U.Components.X,{gap:"2em",children:[(0,s.jsx)(u(),{href:"/",children:(0,s.jsx)(g,{caption:(0,s.jsx)(d.Z,{id:"Label.Home"})})}),(0,s.jsx)(a.U.Components.VLink,{category:a.U.Components.LinkCategory.Self,to:"/pricing",children:(0,s.jsx)(g,{caption:(0,s.jsx)(d.Z,{id:"Label.Pricing"})})}),(0,s.jsx)(u(),{href:"/support",children:(0,s.jsx)(g,{caption:(0,s.jsx)(d.Z,{id:"Label.Support"})})}),(0,s.jsx)(u(),{href:"/download",children:(0,s.jsx)(h,{caption:(0,s.jsx)(d.Z,{id:"Label.Download"})})})]})]})})}}var b=n(64720);function k(){return(k=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var y=function(e){return i.createElement("svg",k({viewBox:"0 0 32 32",fill:"none",xmlns:"http://www.w3.org/2000/svg"},e),t||(t=i.createElement("path",{d:"M26.82 5.96c3.439 5.057 5.137 10.76 4.502 17.327a.099.099 0 0 1-.04.07 25.174 25.174 0 0 1-7.616 3.843.098.098 0 0 1-.107-.037 20.305 20.305 0 0 1-1.554-2.528.097.097 0 0 1 .051-.135 15.69 15.69 0 0 0 2.377-1.13.098.098 0 0 0 .009-.163c-.161-.12-.32-.245-.474-.37a.093.093 0 0 0-.099-.013c-4.925 2.275-10.32 2.275-15.305 0a.095.095 0 0 0-.098.014c-.152.125-.312.25-.472.37a.097.097 0 0 0 .01.161 16.61 16.61 0 0 0 2.376 1.132c.053.02.079.082.052.134-.448.887-.97 1.73-1.555 2.53a.1.1 0 0 1-.107.035c-2.477-.77-5-1.93-7.605-3.843a.103.103 0 0 1-.04-.071c-.53-5.68.552-11.431 4.5-17.327a.089.089 0 0 1 .04-.035 25.057 25.057 0 0 1 6.2-1.922.098.098 0 0 1 .099.047c.268.476.576 1.086.784 1.585 2.292-.35 4.62-.35 6.962 0 .207-.489.504-1.11.771-1.585a.094.094 0 0 1 .1-.047 25.116 25.116 0 0 1 6.199 1.922c.017.007.03.019.04.036zm-12.907 10.8c.024-1.68-1.2-3.07-2.737-3.07-1.524 0-2.736 1.378-2.736 3.07 0 1.69 1.236 3.067 2.736 3.067 1.525 0 2.737-1.377 2.737-3.068zm10.119 0c.024-1.68-1.2-3.07-2.737-3.07-1.524 0-2.737 1.378-2.737 3.07 0 1.69 1.237 3.067 2.737 3.067 1.537 0 2.737-1.377 2.737-3.068z",fill:"currentColor"})))};function _(){return(_=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var x=function(e){return i.createElement("svg",_({viewBox:"0 0 32 32",fill:"none",xmlns:"http://www.w3.org/2000/svg"},e),o||(o=i.createElement("path",{d:"M9.75 28.203c11.698 0 18.095-9.695 18.095-18.103 0-.275-.005-.55-.018-.822A12.936 12.936 0 0 0 31 5.983c-1.14.507-2.366.848-3.652 1.002a6.385 6.385 0 0 0 2.796-3.52 12.754 12.754 0 0 1-4.038 1.545 6.362 6.362 0 0 0-10.838 5.802 18.058 18.058 0 0 1-13.11-6.647 6.347 6.347 0 0 0-.862 3.198 6.358 6.358 0 0 0 2.83 5.296 6.31 6.31 0 0 1-2.88-.796l-.001.081a6.363 6.363 0 0 0 5.103 6.237 6.364 6.364 0 0 1-2.873.11 6.367 6.367 0 0 0 5.941 4.418 12.757 12.757 0 0 1-7.899 2.724A13.04 13.04 0 0 1 0 25.345a17.998 17.998 0 0 0 9.75 2.858",fill:"currentColor"})))};class w extends i.PureComponent{render(){return(0,s.jsxs)(a.U.Components.Y,{gap:"1em",padding:"1em",cross:a.U.Components.YCrossType.Center,children:[(0,s.jsxs)(a.U.Components.X,{gap:"1em",children:[(0,s.jsx)(a.U.Components.VLink,{category:a.U.Components.LinkCategory.NewWindow,to:"https://discord.com/channels/966528814245097522/966528814698090568",children:(0,s.jsx)(a.U.Components.VSvg,{size:a.U.Components.SizeType.Small,frontColor:a.U.Components.ColorType.Placeholder,children:(0,s.jsx)(y,{})})}),(0,s.jsx)(a.U.Components.VLink,{category:a.U.Components.LinkCategory.NewWindow,to:"https://twitter.com/fewbox",children:(0,s.jsx)(a.U.Components.VSvg,{size:a.U.Components.SizeType.Small,frontColor:a.U.Components.ColorType.Placeholder,children:(0,s.jsx)(x,{})})})]}),(0,s.jsx)(a.U.Components.VLabel,{size:a.U.Components.SizeType.ExtraSmall,frontColor:a.U.Components.ColorType.Placeholder,caption:(0,s.jsx)(d.Z,{id:"Label.Copyright"})})]})}}var v=n(49089);class S extends i.Component{render(){return(0,s.jsxs)(b.Z,{locale:"en",messages:a.U.FewBox.BootClass.getInstance().options.getLanguages(),children:[(0,s.jsxs)(c(),{children:[(0,s.jsx)("title",{children:a.U.Language.getIntlMessage(this.props.titleId)}),(0,s.jsx)("link",{rel:"shortcut icon",href:"/favicon.ico"}),(0,s.jsx)("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),(0,s.jsx)("link",{rel:"preconnect",href:"https://fonts.gstatic.com"}),(0,s.jsx)("meta",{name:"description",defaultValue:a.U.Language.getIntlMessage(this.props.descriptionId)}),(0,s.jsx)("meta",{name:"keywords",defaultValue:a.U.Language.getIntlMessage(this.props.keywordsId)}),(0,s.jsx)("meta",{name:"author",defaultValue:a.U.Language.getIntlMessage(this.props.authorId)}),(0,s.jsx)("meta",{name:"viewport",defaultValue:"width=device-width, initial-scale=1.0"})]}),(0,s.jsx)(a.U.Components.VGoogleFont,{typefaces:[{family:"Orbitron",fonts:[{type:a.U.Components.GoogleFontType.Normal,weight:a.U.Components.FontWeightType.Regular},{type:a.U.Components.GoogleFontType.Normal,weight:a.U.Components.FontWeightType.Medium},{type:a.U.Components.GoogleFontType.Normal,weight:a.U.Components.FontWeightType.SemiBold},{type:a.U.Components.GoogleFontType.Normal,weight:a.U.Components.FontWeightType.Bold},{type:a.U.Components.GoogleFontType.Normal,weight:a.U.Components.FontWeightType.ExtraBold},{type:a.U.Components.GoogleFontType.Normal,weight:a.U.Components.FontWeightType.Black}]}]}),(0,s.jsx)(a.U.Components.GA4NextJS,{GA4:v.ZP,isTestMode:!0,path:"/xs",trackingId:"G-RM7TBZCZY1",options:{appName:"FewBox (GA4)",appVersion:"v0.1 (GA4)",dimension1:"FewBox_Dimension1",metric1:"FewBox_Metric1"}}),(0,s.jsx)(a.U.Components.Y,{cross:a.U.Components.YCrossType.Center,margin:"0 0 6em 0",children:(0,s.jsxs)(a.U.Components.VZone,{category:a.U.Components.ZoneCategory.ExtraLarge,children:[(0,s.jsx)(f,{}),this.props.children]})}),(0,s.jsx)(w,{})]})}}},6884:function(e,r,n){"use strict";n.d(r,{A:function(){return t}});let t={SectionPadding:"5em 0"}},17550:function(e,r,n){"use strict";n.r(r),n.d(r,{default:function(){return $}});var t,o,s=n(85893),i=n(67294),a=n(7044),l=n(44012),c=n(24694),p=n(41664),d=n.n(p),m=n(6884),u=n(50941),g=n(63714),h=n(34209),f=n(74855);function b(){return(b=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var k=function(e){return i.createElement("svg",b({viewBox:"0 0 256 256",fill:"none",xmlns:"http://www.w3.org/2000/svg"},e),t||(t=i.createElement("path",{d:"M213.714 70.857h-21.428v100a21.45 21.45 0 0 1-6.284 15.145 21.45 21.45 0 0 1-15.145 6.284h-100v21.429a14.31 14.31 0 0 0 4.189 10.097A14.31 14.31 0 0 0 85.143 228h128.571a14.306 14.306 0 0 0 10.097-4.188A14.311 14.311 0 0 0 228 213.715V85.143a14.306 14.306 0 0 0-14.286-14.286z",fill:"currentColor"})),o||(o=i.createElement("path",{d:"M70.857 185.143h100a14.31 14.31 0 0 0 10.097-4.189 14.31 14.31 0 0 0 4.189-10.097V42.286a14.31 14.31 0 0 0-4.189-10.097A14.308 14.308 0 0 0 170.857 28H42.286a14.308 14.308 0 0 0-10.097 4.189A14.31 14.31 0 0 0 28 42.286v128.571a14.308 14.308 0 0 0 4.189 10.097 14.31 14.31 0 0 0 10.097 4.189h28.571z",fill:"currentColor"})))};class y extends i.PureComponent{copied(){}render(){let e=this;return(0,s.jsx)(u.D,{skipHtml:!1,remarkPlugins:[[g.Z,{singleTilde:!1}]],components:{code(r){let{node:n,inline:t,className:o,children:i,...l}=r,c=/language-(\w+)/.exec(o||"");return c?(0,s.jsxs)(a.U.Components.Y,{children:[(0,s.jsxs)(a.U.Components.XBetween,{children:[(0,s.jsx)(a.U.Components.VLabel,{frontColor:a.U.Components.ColorType.Dark,caption:c[1]}),(0,s.jsx)(f.CopyToClipboard,{text:i.toString(),onCopy:()=>{e.copied()},children:(0,s.jsx)(a.U.Components.VSvg,{frontColor:e.state.isCopied?a.U.Components.ColorType.Success:a.U.Components.ColorType.Primary,size:a.U.Components.SizeType.Small,children:(0,s.jsx)(k,{})})})]}),(0,s.jsx)(a.U.Components.VBoundary,{children:(0,s.jsx)(h.Z,{showLineNumbers:!1,showInlineLineNumbers:!0,wrapLines:!0,lineProps:{style:{wordBreak:"break-all",whiteSpace:"break-spaces"}},language:c[1],children:i.toString()})})]}):(0,s.jsx)("code",{className:o,...l,children:i.toString()})},img(e){let{node:r,...n}=e;return(0,s.jsx)("img",{style:{maxWidth:"90%"},...n})},a(e){let{node:r,className:n,children:t,href:o,...i}=e;return(0,s.jsx)("a",{className:"primary-front",href:o,target:"_blank",children:t})}},children:this.props.content})}constructor(e){super(e),this.state={isCopied:!1}}}class _ extends i.PureComponent{render(){return(0,s.jsx)(a.U.Components.VBoundary,{id:this.props.anchor,children:(0,s.jsx)(y,{content:this.props.content})})}}var x=n(2664),w=n(39424);let v=a.U.Components.SizeType.Large,S=a.U.Components.FontWeightType.ExtraBold,C="12em",R="blue";class I extends i.PureComponent{render(){let e=(0,s.jsxs)(a.U.Components.Y,{gap:"3em",children:[(0,s.jsx)(_,{anchor:"getting-started",content:"en"==w.m.Language?"# Getting Start\r\nThis quick guide will show you how to use FewBox to manage, install & un-install your microservice on your cloud-native platform. You\\'ll also get a few simple pointers on setting yourself up for productivity.\r\n\r\n## Overview\r\n>![architecture](./images/architecture.png)":"# 起步\r\n这个快速指南将告诉你如何使用FewBox来管理、安装和卸载你的云原生平台上的微服务。你还会得到一些关于如何设置自己的生产力的简单指导。"}),(0,s.jsx)(_,{anchor:"prerequisites",content:"en"==w.m.Language?'# Prerequisites\r\n- ## Install Docker\r\n  ![docker](./svgs/docker.svg)\r\n  ```shell\r\n  ### Remove old version ###\r\n  yum remove docker-client \\\r\n  docker-client-latest \\\r\n  docker-common \\\r\n  docker-latest \\\r\n  docker-latest-logrotate \\\r\n  docker-logrotate \\\r\n  docker-selinux \\\r\n  docker-engine-selinux \\\r\n  docker-engine\r\n  ```\r\n  ```shell\r\n  ### Install ###\r\n  yum install yum-utils\r\n  yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\n  yum install docker-ce\r\n  systemctl enable docker && systemctl start docker\r\n  ```\r\n  ```shell\r\n  ### Setting ###\r\n  cat > /etc/docker/daemon.json <<EOF\r\n  {\r\n    "exec-opts": ["native.cgroupdriver=systemd"],\r\n    "log-driver": "json-file",\r\n    "log-opts": {\r\n      "max-size": "100m"\r\n    },\r\n    "storage-driver": "overlay2",\r\n    "registry-mirrors": [\r\n      "https://hub-mirror.c.163.com",\r\n      "https://mirror.baidubce.com"\r\n    ],\r\n    "insecure-registries": ["192.168.1.38:5000"]\r\n  }\r\n  EOF\r\n  # Check\r\n  docker info | grep Cgroup\r\n  ```\r\n- ## Install Kubernetes\r\n  ![kubernetes](./svgs/kubernetes.svg)\r\n  >  Kubeadm\r\n  ```shell\r\n  vi /etc/yum.repos.d/kubernetes.repo\r\n  ```\r\n  ```ini\r\n  [kubernetes] \r\n  name=Kubernetes \r\n  baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 \r\n  enabled=1 \r\n  gpgcheck=0\r\n  ```\r\n  ```shell\r\n  ### Install ###\r\n  # kubelet\r\n  # yum --showduplicates list kubelet\r\n  yum remove kubelet\r\n  yum install kubelet-1.19.16-0\r\n  yum install kubeadm-1.19.16\r\n  ```\r\n  >  Image\r\n  ```shell\r\n  ### Sync Master Image (sync.sh) ###\r\n  echo ""\r\n  # Init Parameters\r\n  MY_REGISTRY=registry.cn-hangzhou.aliyuncs.com/google_containers\r\n  # MY_REGISTRY=mirrorgcrio\r\n  VERSION=$(kubeadm config images list | grep -m1 kube | awk -F: \'{print $2}\')\r\n  ETCD_VERSION=$(kubeadm config images list | grep -m1 etcd | awk -F: \'{print $2}\')\r\n  PAUSE_VERSION=$(kubeadm config images list | grep -m1 pause | awk -F: \'{print $2}\')\r\n  COREDNS_VERSION=$(kubeadm config images list | grep -m1 coredns | awk -F: \'{print $2}\')\r\n  \r\n  echo "==================================================================="\r\n  echo "FewBox Pull Kubernetes "$VERSION" Images from "$MY_REGISTRY" ......"\r\n  echo "==================================================================="\r\n  echo ""\r\n  kubeadm config images list\r\n  \r\n  # Pull Image\r\n  docker pull ${MY_REGISTRY}/kube-apiserver:$VERSION\r\n  docker pull ${MY_REGISTRY}/kube-controller-manager:$VERSION\r\n  docker pull ${MY_REGISTRY}/kube-scheduler:$VERSION\r\n  docker pull ${MY_REGISTRY}/kube-proxy:$VERSION\r\n  docker pull ${MY_REGISTRY}/etcd:$ETCD_VERSION\r\n  docker pull ${MY_REGISTRY}/pause:$PAUSE_VERSION\r\n  docker pull ${MY_REGISTRY}/coredns:$COREDNS_VERSION\r\n  \r\n  # Add Tag\r\n  docker tag ${MY_REGISTRY}/kube-apiserver:$VERSION k8s.gcr.io/kube-apiserver:$VERSION\r\n  docker tag ${MY_REGISTRY}/kube-scheduler:$VERSION k8s.gcr.io/kube-scheduler:$VERSION\r\n  docker tag ${MY_REGISTRY}/kube-controller-manager:$VERSION k8s.gcr.io/kube-controller-manager:$VERSION\r\n  docker tag ${MY_REGISTRY}/kube-proxy:$VERSION k8s.gcr.io/kube-proxy:$VERSION\r\n  docker tag ${MY_REGISTRY}/etcd:$ETCD_VERSION k8s.gcr.io/etcd:$ETCD_VERSION\r\n  docker tag ${MY_REGISTRY}/pause:$PAUSE_VERSION k8s.gcr.io/pause:$PAUSE_VERSION\r\n  docker tag ${MY_REGISTRY}/coredns:$COREDNS_VERSION k8s.gcr.io/coredns:$COREDNS_VERSION\r\n  \r\n  echo ""\r\n  echo "=================================================="\r\n  echo "FewBox Pull Kubernetes "$VERSION" Images FINISHED."\r\n  echo "=================================================="\r\n  \r\n  echo ""\r\n  ```\r\n  ```shell\r\n  ### Sync Worker Image (sync.sh) ###\r\n  echo ""\r\n  # Init Parameters\r\n  MY_REGISTRY=registry.cn-hangzhou.aliyuncs.com/google_containers\r\n  # MY_REGISTRY=mirrorgcrio\r\n  VERSION=$(kubeadm config images list | grep -m1 kube | awk -F: \'{print $2}\')\r\n  ETCD_VERSION=$(kubeadm config images list | grep -m1 etcd | awk -F: \'{print $2}\')\r\n  PAUSE_VERSION=$(kubeadm config images list | grep -m1 pause | awk -F: \'{print $2}\')\r\n  COREDNS_VERSION=$(kubeadm config images list | grep -m1 coredns | awk -F: \'{print $2}\')\r\n  \r\n  echo "==================================================================="\r\n  echo "FewBox Pull Kubernetes "$VERSION" Images from "$MY_REGISTRY" ......"\r\n  echo "==================================================================="\r\n  echo ""\r\n  kubeadm config images list\r\n  \r\n  # Pull Image\r\n  docker pull ${MY_REGISTRY}/kube-proxy:$VERSION\r\n  docker pull ${MY_REGISTRY}/pause:$PAUSE_VERSION\r\n  docker pull ${MY_REGISTRY}/coredns:$COREDNS_VERSION\r\n  \r\n  # Add Tag\r\n  docker tag ${MY_REGISTRY}/kube-proxy:$VERSION k8s.gcr.io/kube-proxy:$VERSION\r\n  docker tag ${MY_REGISTRY}/pause:$PAUSE_VERSION k8s.gcr.io/pause:$PAUSE_VERSION\r\n  docker tag ${MY_REGISTRY}/coredns:$COREDNS_VERSION k8s.gcr.io/coredns:$COREDNS_VERSION\r\n  \r\n  echo ""\r\n  echo "=================================================="\r\n  echo "FewBox Pull Kubernetes "$VERSION" Images FINISHED."\r\n  echo "=================================================="\r\n  \r\n  echo ""\r\n  ```\r\n  >  Cluster Network\r\n  ```shell\r\n  ### Setting (Network) ###\r\n  # Firewall\r\n  systemctl stop firewalld\r\n  systemctl disable firewalld\r\n  # Set SELinux in permissive mode (effectively disabling it)\r\n  sudo setenforce 0\r\n  sudo sed -i \'s/^SELINUX=enforcing$/SELINUX=permissive/\' /etc/selinux/config\r\n  swapoff -a\r\n  sed -i \'/ swap / s/^\\(.*\\)$/#\\1/g\' /etc/fstab\r\n  # Bridge\r\n  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\r\n  net.bridge.bridge-nf-call-ip6tables = 1\r\n  net.bridge.bridge-nf-call-iptables = 1\r\n  EOF\r\n  # Check\r\n  sysctl --system\r\n  ```\r\n  ```shell\r\n  ### Agent (Kubelet) ###\r\n  systemctl daemon-reload\r\n  systemctl enable kubelet && systemctl restart kubelet\r\n  journalctl -xefu kubelet\r\n  ```\r\n  >  Kubernetes\r\n  ```shell\r\n  ### Install Master ###\r\n  # Multiple Eth need --apiserver-advertise-address\r\n  kubeadm init --pod-network-cidr=10.244.0.0/16 --kubernetes-version=1.19.16\r\n  ```\r\n  ```shell\r\n  ### Install Worker ###\r\n  # Print join script\r\n  kubeadm token create --print-join-command\r\n  # Join master\r\n  kubeadm join 172.17.0.1:6443 --token vv4prq.ezm481v2k0oa0273 --discovery-token-ca-cert-hash sha256:bd34337dcab22ce02049d1f98dc73a96729f1a3b9c9d80a3d76e175af1db4e21\r\n  ```\r\n  ```shell\r\n  ### Network (Flannel) ###\r\n  # Download\r\n  wget https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml\r\n  # Change "net-conf.json > Network" to kubernetes podCIDR 10.244.0.0/16\r\n  kubectl cluster-info dump | grep -m 1 cluster-cidr\r\n  vi kube-flannel.yml\r\n  # \r\n  kubectl apply -f kube-flannel.yml\r\n  ```\r\n  > Test\r\n  ```shell\r\n  # start.sh\r\n  export KUBECONFIG=/etc/kubernetes/admin.conf\r\n  alias k=kubectl  #~/.bashrc\r\n  source <(kubectl completion bash)\r\n  source <(kubectl completion bash | sed   s/kubectl/k/g)\r\n  alias kcd=\'kubectl config set-context $(kubectl   config current-context) --namespace\'\r\n  export CALICO_DATASTORE_TYPE=kubernetes\r\n  export   CALICO_KUBECONFIG=/etc/kubernetes/admin.conf\r\n  # export PATH=$PATH:/root/istio-1.6.2/bin/\r\n  ```\r\n  ```shell\r\n  # Enable tab help\r\n  yum -y install bash-completion\r\n  bash /usr/share/bash-completion/bash_completion\r\n  bash\r\n  ```\r\n  ```shell\r\n  ### Check Kubernetes Status ###\r\n  k get cs\r\n  # scheduler            Unhealthy   Get "http://127.0.0.1:10251/healthz": dial tcp 127.0.0.1:10251: connect:   connection refused   \r\n  # controller-manager   Unhealthy   Get "http://127.0.0.1:10252/healthz": dial tcp 127.0.0.1:10252: connect:   connection refused\r\n  # Solution: need to remove "--port=0" in kube-controller-manager.yaml  kube-scheduler.yaml   /etc/kubernetes/manifests \r\n  systemctl restart kubelet.service\r\n  ```\r\n  ```shell\r\n  ### Resource ###\r\n  kubectl describe node\r\n  kubectl describe node |grep -E \'((Name|Roles):\\s{6,})|(\\s+(memory|cpu)\\s+[0-9]+\\w{0,2}.+%\\))\'\r\n  ```\r\n  ```shell\r\n  ### Clean ###\r\n  kubectl drain <node name> --delete-local-data --force --ignore-daemonsets\r\n  kubeadm reset\r\n  cd /etc/cni/net.d/\r\n  # remove /etc/cni/net.d/\r\n  lsof -i :6443|grep -v "PID"|awk \'{print "kill -9",$2}\'|sh\r\n  iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X\r\n  ipvsadm -C\r\n  kubectl delete node <node name>\r\n  ```\r\n  ```shell\r\n  ### Enable Master Deploy ###\r\n  kubectl taint nodes --all node-role.kubernetes.io/master-\r\n  ```\r\n  ```shell\r\n  ### Metric ###\r\n  docker pull bitnami/metrics-server:0.6.1\r\n  docker tag bitnami/metrics-server:0.6.1 k8s.gcr.io/metrics-server/metrics-server:v0.6.1\r\n  kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\r\n  ```\r\n  ```yaml\r\n  ### Disable Metric Security ###\r\n  spec:\r\n      containers:\r\n      - args:\r\n        - --cert-dir=/tmp\r\n        - --secure-port=4443\r\n        command:\r\n        - /metrics-server\r\n        - --kubelet-insecure-tls=true\r\n        - --kubelet-preferred-address-types=InternalIP\r\n        image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7\r\n  ```\r\n  ```yaml\r\n  ### Disable Metric Security ###\r\n  args:\r\n    - --cert-dir=/tmp\r\n    - --secure-port=4443\r\n    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname\r\n    - --kubelet-use-node-status-port\r\n    - --kubelet-insecure-tls # Add this line (New Version).\r\n  ```\r\n  ```shell\r\n  ### Check Metric ###\r\n  kubectl top node\r\n  kubectl top pod\r\n  ```\r\n- ## Install Istio\r\n  ![istio](./svgs/istio.svg)\r\n  ```shell\r\n  ### Install ###\r\n  curl -L https://istio.io/downloadIstio | sh -\r\n  istioctl install\r\n  ```\r\n  ```shell\r\n  ### Addon ###\r\n  kubectl apply -f ./samples/addons/prometheus.yaml\r\n  kubectl apply -f ./samples/addons/grafana.yaml\r\n  kubectl apply -f ./samples/addons/jaeger.yaml\r\n  kubectl apply -f ./samples/addons/kiali.yaml\r\n  ```\r\n  ```shell\r\n  ### Profile ###\r\n  # istioctl install --set profile=demo\r\n  istioctl profile list\r\n  istioctl profile dump default\r\n  istioctl profile diff default demo\r\n  ```\r\n  ```shell\r\n  ### Verify ###\r\n  istioctl manifest generate > $HOME/generated-manifest.yaml\r\n  istioctl verify-install -f $HOME/generated-manifest.yaml\r\n  ```\r\n  ```shell\r\n  ### Uninstall ###\r\n  # All\r\n  istioctl x uninstall --purge\r\n  # Control Panel\r\n  istioctl x uninstall <your original installation options>\r\n  istioctl manifest generate <your original installation options> | kubectl delete -f -\r\n  # Namespace\r\n  kubectl delete namespace istio-system\r\n  # \r\n  ```\r\n- ## Install NFS\r\n  > NFS\r\n  ```shell\r\n  ### Install ###\r\n  yum -y install nfs-utils rpcbind\r\n  mkdir -p /data/k8s\r\n  chmod 755 /data/k8s\r\n  vi /etc/exports\r\n  # /etc/exports\r\n  # /data/k8s 192.168.1.0/24(rw,sync,no_root_squash) // /data/k8s *(rw,sync,no_root_squash)\r\n  curl -v telnet://192.168.1.38:2049\r\n  ```\r\n  ```shell\r\n  ### Start Service ###\r\n  systemctl enable rpcbind\r\n  systemctl enable nfs\r\n  systemctl start rpcbind\r\n  systemctl start nfs\r\n  rpcinfo -p\r\n  exportfs -r\r\n  exportfs\r\n  ```\r\n  > Kubernetes\r\n  ```shell\r\n  # IMPORTANT!!! Need to install in the master(optional) and worker node.\r\n  yum install nfs-utils\r\n  ```\r\n  > Test\r\n  ```shell\r\n  ### Client ###\r\n  yum install nfs-common nfs-utils -y\r\n  ```\r\n  ```shell\r\n  ### Mount & Umount ###\r\n  mount -t nfs 192.168.1.38:/NFS/k8s /mount/nfs # Master and Worker Nodes, All point to NFS Server.\r\n  # mount -t nfs 192.168.1.38:/data/k8s /mount/nfs # Master and Worker Nodes, All point to NFS Server.\r\n  # mount -t nfs 192.168.1.38:/NFS/nginx /mount/nfs\r\n  curl -v telnet://192.168.1.38:2049\r\n  umount -f -l /mount/data/k8s\r\n  ```\r\n- ## Install Nginx\r\n  ```shell\r\n  ### Install ###\r\n  yum install nginx\r\n  # Setting firewall\r\n  systemctl status firewalld\r\n  firewall-cmd --zone=public --add-port=80/tcp --permanent\r\n  firewall-cmd --reload\r\n  ```\r\n  ```ini\r\n  #user  nginx;\r\n  #user  root; # Permission Issue.\r\n  #Defines which Linux system user will own and run the Nginx server\r\n  \r\n  worker_processes  1;\r\n  #Referes to single threaded process. Generally set to be equal to the number of CPUs or cores.\r\n  \r\n  #error_log  logs/error.log; #error_log  logs/error.log  notice;\r\n  #Specifies the file where server logs.\r\n  \r\n  #pid        logs/nginx.pid;\r\n  #nginx will write its master process ID(PID).\r\n  \r\n  events {\r\n      worker_connections  1024;\r\n      # worker_processes and worker_connections allows you to calculate maxclients value:\r\n      # max_clients = worker_processes * worker_connections\r\n  }\r\n  \r\n  \r\n  http {\r\n      ssl_certificate /etc/ssl/fewbox.crt;\r\n      ssl_certificate_key /etc/ssl/fewbox.key;\r\n      upstream istio {\r\n          server 172.17.6.3:30815;\r\n          server 172.17.6.4:30815;\r\n          server 172.17.6.5:30815;\r\n      }\r\n      include       mime.types;\r\n      # anything written in /opt/nginx/conf/mime.types is interpreted as if written inside the http { } block\r\n  \r\n      default_type  application/octet-stream;\r\n      #\r\n      fastcgi_connect_timeout 600;\r\n      fastcgi_send_timeout 600;\r\n      fastcgi_read_timeout 600;\r\n      client_max_body_size 200M;\r\n      proxy_connect_timeout       600;\r\n      proxy_send_timeout          600;\r\n      proxy_read_timeout          600;\r\n      proxy_http_version 1.1;\r\n      send_timeout                600;\r\n  \r\n      #log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\r\n      #                  \'$status $body_bytes_sent "$http_referer" \'\r\n      #                  \'"$http_user_agent" "$http_x_forwarded_for"\';\r\n  \r\n      #access_log  logs/access.log  main;\r\n  \r\n      sendfile        on;\r\n      # If serving locally stored static files, sendfile is essential to speed up the server,\r\n      # But if using as reverse proxy one can deactivate it\r\n  \r\n      #tcp_nopush     on;\r\n      # works opposite to tcp_nodelay. Instead of optimizing delays, it optimizes the amount of data sent at   once.\r\n  \r\n      #keepalive_timeout  0;\r\n      keepalive_timeout  65;\r\n      # timeout during which a keep-alive client connection will stay open.\r\n  \r\n      gzip  on;\r\n      gzip_min_length 1k;\r\n      gzip_buffers 4 16k;\r\n      gzip_comp_level 5;\r\n      gzip_types gzip_types text/plain application/javascript application/x-javascript text/css   application/xml text/javascript application/x-httpd-php;\r\n      gzip_http_version 1.1;\r\n      gzip_vary on;\r\n      gzip_proxied any;\r\n      gzip_disable msie6;\r\n      # tells the server to use on-the-fly gzip compression.\r\n  \r\n      server {\r\n          # You would want to make a separate file with its own server block for each virtual domain\r\n          # on your server and then include them.\r\n          listen       80;\r\n          #tells Nginx the hostname and the TCP port where it should listen for HTTP connections.\r\n          # listen 80; is equivalent to listen *:80;\r\n  \r\n          server_name  _;\r\n          # lets you doname-based virtual hosting\r\n  \r\n          charset utf-8;\r\n  \r\n          #access_log  logs/host.access.log  main;\r\n  \r\n          return 302 https://$server_name$request_uri;\r\n  \r\n          #error_page  404              /404.html;\r\n  \r\n          # redirect server error pages to the static page /50x.html\r\n          #\r\n          error_page   500 502 503 504  /50x.html;\r\n          location = /50x.html {\r\n              root   html;\r\n          }\r\n  \r\n          # proxy the PHP scripts to Apache listening on 127.0.0.1:80\r\n          #\r\n          #location ~ \\.php$ {\r\n          #    proxy_pass   http://127.0.0.1;\r\n          #}\r\n  \r\n          # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\r\n          #\r\n          #location ~ \\.php$ {\r\n          #    root           html;\r\n          #    fastcgi_pass   127.0.0.1:9000;\r\n          #    fastcgi_index  index.php;\r\n          #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\r\n          #    include        fastcgi_params;\r\n          #}\r\n  \r\n          # deny access to .htaccess files, if Apache\'s document root\r\n          # concurs with nginx\'s one\r\n          #\r\n          #location ~ /\\.ht {\r\n          #    deny  all;\r\n          #}\r\n      }\r\n  \r\n      server\r\n      {\r\n          listen 443 ssl;\r\n          server_name _;\r\n          proxy_set_header Host  $host;\r\n          proxy_set_header X-Forwarded-For $remote_addr;\r\n          location / {\r\n                  proxy_set_header X-Real-IP $remote_addr;\r\n                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n                  proxy_set_header Host $host:$server_port;\r\n                  proxy_set_header X-NginX-Proxy true;\r\n                  proxy_set_header Upgrade $http_upgrade;\r\n                  proxy_set_header Connection "upgrade";\r\n                  proxy_pass http://istio;\r\n          }\r\n      }\r\n      server\r\n      {\r\n          listen 8443 ssl;\r\n          server_name _;\r\n          proxy_set_header Host $host;\r\n          proxy_set_header X-Forwarded-For $remote_addr;\r\n          location / {\r\n                  proxy_pass https://172.17.6.3:6443; # Your Api Server Address\r\n                  proxy_set_header Upgrade $http_upgrade;\r\n                  proxy_set_header Connection "upgrade";\r\n          }\r\n      }\r\n      server {\r\n          # You would want to make a separate file with its own server block for each virtual domain\r\n          # on your server and then include them.\r\n          listen 7443 ssl;\r\n          #tells Nginx the hostname and the TCP port where it should listen for HTTP connections.\r\n          # listen 80; is equivalent to listen *:80;\r\n  \r\n          server_name  _;\r\n          # lets you doname-based virtual hosting\r\n  \r\n          charset utf-8;\r\n  \r\n          #access_log  logs/host.access.log  main;\r\n  \r\n          location / {\r\n              #The location setting lets you configure how nginx responds to requests for resources within the   server.\r\n              #root   /usr/share/nginx/html;\r\n              #index  index.html index.htm;\r\n              #try_files $uri /index.html;\r\n              proxy_set_header X-Real-IP $remote_addr;\r\n              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n              proxy_set_header Host $host:$server_port;\r\n              proxy_set_header X-NginX-Proxy true;\r\n              proxy_set_header Upgrade $http_upgrade;\r\n              proxy_set_header Connection "upgrade";\r\n              proxy_pass http://istio;\r\n              #proxy_set_header Host  $host;\r\n              #proxy_set_header X-Forwarded-For $remote_addr;\r\n              #proxy_pass http://istio;\r\n          }\r\n  \r\n          #error_page  404              /404.html;\r\n  \r\n          # redirect server error pages to the static page /50x.html\r\n          #\r\n          error_page   500 502 503 504  /50x.html;\r\n          location = /50x.html {\r\n              root   html;\r\n          }\r\n  \r\n          # proxy the PHP scripts to Apache listening on 127.0.0.1:80\r\n          #\r\n          #location ~ \\.php$ {\r\n          #    proxy_pass   http://127.0.0.1;\r\n          #}\r\n  \r\n          # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\r\n          #\r\n          #location ~ \\.php$ {\r\n          #    root           html;\r\n          #    fastcgi_pass   127.0.0.1:9000;\r\n          #    fastcgi_index  index.php;\r\n          #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\r\n          #    include        fastcgi_params;\r\n          #}\r\n  \r\n          # deny access to .htaccess files, if Apache\'s document root\r\n          # concurs with nginx\'s one\r\n          #\r\n          #location ~ /\\.ht {\r\n          #    deny  all;\r\n          #}\r\n      }\r\n  \r\n  \r\n      # another virtual host using mix of IP-, name-, and port-based configuration\r\n      #\r\n      #server {\r\n      #    listen       8000;\r\n      #    listen       somename:8080;\r\n      #    server_name  somename  alias  another.alias;\r\n  \r\n      #    location / {\r\n      #        root   html;\r\n      #        index  index.html index.htm;\r\n      #    }\r\n      #}\r\n  }\r\n  ```\r\n- ## Install SSL\r\n  > Let\'s Encrypt (https://letsencrypt.org/)\r\n  >\r\n  > Cerbot (https://certbot.eff.org/)\r\n  ```shell\r\n  # Generate SSL private key with password (fewbox-pw.key)\r\n  openssl genrsa -des3 -out fewbox-pw.key 2048\r\n  # View private key with password\r\n  openssl rsa -text -in fewbox-pw.key\r\n  # View private key with password\r\n  cat fewbox-pw.key\r\n  # Generate CSR (fewbox.csr) Certificate Signing Request\r\n  openssl req -new -key fewbox-pw.key -out fewbox.csr\r\n  # View CSR\r\n  openssl req -text -in fewbox.csr -noout\r\n  # Generate CRT (fewbox.crt) Certificate\r\n  openssl x509 -req -days 365 -in fewbox.csr -signkey fewbox-pw.key -out fewbox.crt\r\n  # Generate SSL private key\r\n  openssl rsa -in fewbox-pw.key -out fewbox.key\r\n  ```\r\n- ## Setting Firewalld\r\n  ```shell\r\n  # View status\r\n  systemctl status firewalld\r\n  # Reboot\r\n  firewall-cmd --reload\r\n  # Power on start\r\n  systemctl enable firewalld\r\n  # Disable power on start\r\n  sytemctl disable firewalld\r\n  # Start\r\n  systemctl start firewalld \r\n  # Stop\r\n  systemctl stop firewalld\r\n  # View zone\r\n  firewall-cmd --get-active-zones\r\n  firewall-cmd --get-zone-of-interface=enp0s3\r\n  # View refuse pack status\r\n  firewall-cmd --query-panic\r\n  # Refuse all pack\r\n  firewall-cmd --panic-on\r\n  # Allow all pack\r\n  firewall-cmd --panic-off\r\n  # View port\r\n  firewall-cmd --zone=public --list-ports\r\n  # Open port\r\n  firewall-cmd --zone=public --add-port=80/tcp --permanent\r\n  firewall-cmd --reload\r\n  # Others\r\n  # firewall-cmd --zone=public --add-interface=eth0 (FOREVER add \'--permanent\' and then reload firewall)\r\n  # firewall-cmd --set-default-zone=public (Valiable immediately, no need rebot)\r\n  # firewall-cmd --reload orfirewall-cmd --complete-reload (No1 no need diconnect, No2 need disconnect as reboot)\r\n  ```\r\n- ## Install FRP (Optional)\r\n  > Download\r\n  ```shell\r\n  # https://github.com/fatedier/frp/releases\r\n  # amd64\r\n  wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz\r\n  ```\r\n  > Server (with public network IP)\r\n  ```ini\r\n  # https://gofrp.org/docs/examples/ frps.ini\r\n  [common]\r\n  bind_port = 7000\r\n  vhost_http_port = 8080\r\n  vhost_https_port = 8081\r\n  log_file = console\r\n  dashboard_addr = 0.0.0.0\r\n  dashboard_port = 7500\r\n  dashboard_user = fewbox\r\n  dashboard_pwd = {Your Pwd}\r\n  token = {Your Token}\r\n  max_pool_count = 50\r\n  ```\r\n  ```shell\r\n  vi /etc/systemd/system/frps.service\r\n  ```\r\n  ```ini\r\n  [Unit]\r\n  Description = frp server\r\n  After = network.target syslog.target\r\n  Wants = network.target\r\n  \r\n  [Service]\r\n  Type = simple\r\n  ExecStart = /path/to/frps -c /path/to/frps.ini\r\n  \r\n  [Install]\r\n  WantedBy = multi-user.target\r\n  ```\r\n  ```shell\r\n  systemctl start frps\r\n  systemctl stop frps\r\n  systemctl restart frps\r\n  systemctl status frps\r\n  systemctl enable frps\r\n  ```\r\n  > Client (Internal Cluster Egress)\r\n  ```shell\r\n  # Pull image\r\n  docker pull fatedier/frpc\r\n  ```\r\n  ```ini\r\n  [common]\r\n  server_addr = {Server IP}\r\n  server_port = 7000\r\n  token = {Your Token}\r\n  \r\n  [web]\r\n  type = http\r\n  local_ip = {Local IP: EG. nginx}\r\n  local_port = 5000\r\n  custom_domains = *.fewbox.com\r\n  ```\r\n  > ### **NAS**\r\n  >\r\n  > Command: -c /frpc/frpc.ini\r\n  >\r\n  > Endpoint: /usr/bin/frpc\r\n  >\r\n  > Share Folder: /DevOps/frpc /frpc\r\n- ## Install esxi (Optional)\r\n  > https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=gn51y&lwp=rt':'# 先决条件\r\n- ## 安装Docker\r\n  ![docker](./svgs/docker.svg)\r\n  ```shell\r\n  ### 删除旧版本 ###\r\n  yum remove docker-client \\\r\n  docker-client-latest \\\r\n  docker-common \\\r\n  docker-latest \\\r\n  docker-latest-logrotate \\\r\n  docker-logrotate \\\r\n  docker-selinux \\\r\n  docker-engine-selinux \\\r\n  docker-engine\r\n  ```\r\n  ```shell\r\n  ### 安装 ###\r\n  yum install yum-utils\r\n  yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r\n  yum install docker-ce\r\n  systemctl enable docker && systemctl start docker\r\n  ```\r\n  ```shell\r\n  ### 设置 ###\r\n  cat > /etc/docker/daemon.json <<EOF\r\n  {\r\n    "exec-opts": ["native.cgroupdriver=systemd"],\r\n    "log-driver": "json-file",\r\n    "log-opts": {\r\n      "max-size": "100m"\r\n    },\r\n    "storage-driver": "overlay2",\r\n    "registry-mirrors": [\r\n      "https://hub-mirror.c.163.com",\r\n      "https://mirror.baidubce.com"\r\n    ],\r\n    "insecure-registries": ["192.168.1.38:5000"]\r\n  }\r\n  EOF\r\n  # Check\r\n  docker info | grep Cgroup\r\n  ```\r\n- ## 安装Kubernetes\r\n  ![kubernetes](./svgs/kubernetes.svg)\r\n  >  Kubeadm\r\n  ```shell\r\n  vi /etc/yum.repos.d/kubernetes.repo\r\n  ```\r\n  ```ini\r\n  [kubernetes] \r\n  name=Kubernetes \r\n  baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 \r\n  enabled=1 \r\n  gpgcheck=0\r\n  ```\r\n  ```shell\r\n  ### 安装 ###\r\n  # kubelet\r\n  # yum --showduplicates list kubelet\r\n  yum remove kubelet\r\n  yum install kubelet-1.19.16-0\r\n  yum install kubeadm-1.19.16\r\n  ```\r\n  >  镜像\r\n  ```shell\r\n  ### 同步Master镜像 (sync.sh) ###\r\n  echo ""\r\n  # 初始化参数\r\n  MY_REGISTRY=registry.cn-hangzhou.aliyuncs.com/google_containers\r\n  # MY_REGISTRY=mirrorgcrio\r\n  VERSION=$(kubeadm config images list | grep -m1 kube | awk -F: \'{print $2}\')\r\n  ETCD_VERSION=$(kubeadm config images list | grep -m1 etcd | awk -F: \'{print $2}\')\r\n  PAUSE_VERSION=$(kubeadm config images list | grep -m1 pause | awk -F: \'{print $2}\')\r\n  COREDNS_VERSION=$(kubeadm config images list | grep -m1 coredns | awk -F: \'{print $2}\')\r\n  \r\n  echo "==================================================================="\r\n  echo "FewBox Pull Kubernetes "$VERSION" Images from "$MY_REGISTRY" ......"\r\n  echo "==================================================================="\r\n  echo ""\r\n  kubeadm config images list\r\n  \r\n  # 拉取镜像\r\n  docker pull ${MY_REGISTRY}/kube-apiserver:$VERSION\r\n  docker pull ${MY_REGISTRY}/kube-controller-manager:$VERSION\r\n  docker pull ${MY_REGISTRY}/kube-scheduler:$VERSION\r\n  docker pull ${MY_REGISTRY}/kube-proxy:$VERSION\r\n  docker pull ${MY_REGISTRY}/etcd:$ETCD_VERSION\r\n  docker pull ${MY_REGISTRY}/pause:$PAUSE_VERSION\r\n  docker pull ${MY_REGISTRY}/coredns:$COREDNS_VERSION\r\n  \r\n  # 添加标签\r\n  docker tag ${MY_REGISTRY}/kube-apiserver:$VERSION k8s.gcr.io/kube-apiserver:$VERSION\r\n  docker tag ${MY_REGISTRY}/kube-scheduler:$VERSION k8s.gcr.io/kube-scheduler:$VERSION\r\n  docker tag ${MY_REGISTRY}/kube-controller-manager:$VERSION k8s.gcr.io/kube-controller-manager:$VERSION\r\n  docker tag ${MY_REGISTRY}/kube-proxy:$VERSION k8s.gcr.io/kube-proxy:$VERSION\r\n  docker tag ${MY_REGISTRY}/etcd:$ETCD_VERSION k8s.gcr.io/etcd:$ETCD_VERSION\r\n  docker tag ${MY_REGISTRY}/pause:$PAUSE_VERSION k8s.gcr.io/pause:$PAUSE_VERSION\r\n  docker tag ${MY_REGISTRY}/coredns:$COREDNS_VERSION k8s.gcr.io/coredns:$COREDNS_VERSION\r\n  \r\n  echo ""\r\n  echo "=================================================="\r\n  echo "FewBox Pull Kubernetes "$VERSION" Images FINISHED."\r\n  echo "=================================================="\r\n  \r\n  echo ""\r\n  ```\r\n  ```shell\r\n  ### 同步Woker镜像 (sync.sh) ###\r\n  echo ""\r\n  # 初始化参数\r\n  MY_REGISTRY=registry.cn-hangzhou.aliyuncs.com/google_containers\r\n  # MY_REGISTRY=mirrorgcrio\r\n  VERSION=$(kubeadm config images list | grep -m1 kube | awk -F: \'{print $2}\')\r\n  ETCD_VERSION=$(kubeadm config images list | grep -m1 etcd | awk -F: \'{print $2}\')\r\n  PAUSE_VERSION=$(kubeadm config images list | grep -m1 pause | awk -F: \'{print $2}\')\r\n  COREDNS_VERSION=$(kubeadm config images list | grep -m1 coredns | awk -F: \'{print $2}\')\r\n  \r\n  echo "==================================================================="\r\n  echo "FewBox Pull Kubernetes "$VERSION" Images from "$MY_REGISTRY" ......"\r\n  echo "==================================================================="\r\n  echo ""\r\n  kubeadm config images list\r\n  \r\n  # 拉取镜像\r\n  docker pull ${MY_REGISTRY}/kube-proxy:$VERSION\r\n  docker pull ${MY_REGISTRY}/pause:$PAUSE_VERSION\r\n  docker pull ${MY_REGISTRY}/coredns:$COREDNS_VERSION\r\n  \r\n  # 添加标签\r\n  docker tag ${MY_REGISTRY}/kube-proxy:$VERSION k8s.gcr.io/kube-proxy:$VERSION\r\n  docker tag ${MY_REGISTRY}/pause:$PAUSE_VERSION k8s.gcr.io/pause:$PAUSE_VERSION\r\n  docker tag ${MY_REGISTRY}/coredns:$COREDNS_VERSION k8s.gcr.io/coredns:$COREDNS_VERSION\r\n  \r\n  echo ""\r\n  echo "=================================================="\r\n  echo "FewBox Pull Kubernetes "$VERSION" Images FINISHED."\r\n  echo "=================================================="\r\n  \r\n  echo ""\r\n  ```\r\n  >  Cluster Network\r\n  ```shell\r\n  ### 设置 (网络) ###\r\n  # 防火墙\r\n  systemctl stop firewalld\r\n  systemctl disable firewalld\r\n  # 将SELinux设置为允许模式（有效地禁用它）。\r\n  sudo setenforce 0\r\n  sudo sed -i \'s/^SELINUX=enforcing$/SELINUX=permissive/\' /etc/selinux/config\r\n  swapoff -a\r\n  sed -i \'/ swap / s/^\\(.*\\)$/#\\1/g\' /etc/fstab\r\n  # 桥接\r\n  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\r\n  net.bridge.bridge-nf-call-ip6tables = 1\r\n  net.bridge.bridge-nf-call-iptables = 1\r\n  EOF\r\n  # Check\r\n  sysctl --system\r\n  ```\r\n  ```shell\r\n  ### 代理 (Kubelet) ###\r\n  systemctl daemon-reload\r\n  systemctl enable kubelet && systemctl restart kubelet\r\n  journalctl -xefu kubelet\r\n  ```\r\n  >  Kubernetes\r\n  ```shell\r\n  ### 安装Master ###\r\n  # Multiple Eth need --apiserver-advertise-address\r\n  kubeadm init --pod-network-cidr=10.244.0.0/16 --kubernetes-version=1.19.16\r\n  ```\r\n  ```shell\r\n  ### 安装Worker ###\r\n  # 打印连接脚本\r\n  kubeadm token create --print-join-command\r\n  # 链接Master\r\n  kubeadm join 172.17.0.1:6443 --token vv4prq.ezm481v2k0oa0273 --discovery-token-ca-cert-hash sha256:bd34337dcab22ce02049d1f98dc73a96729f1a3b9c9d80a3d76e175af1db4e21\r\n  ```\r\n  ```shell\r\n  ### 网络 (Flannel) ###\r\n  # 下载\r\n  wget https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml\r\n  # 更改 "net-conf.json > Network" 为 kubernetes podCIDR 10.244.0.0/16\r\n  kubectl cluster-info dump | grep -m 1 cluster-cidr\r\n  vi kube-flannel.yml\r\n  # \r\n  kubectl apply -f kube-flannel.yml\r\n  ```\r\n  > 测试\r\n  ```shell\r\n  # start.sh\r\n  export KUBECONFIG=/etc/kubernetes/admin.conf\r\n  alias k=kubectl  #~/.bashrc\r\n  source <(kubectl completion bash)\r\n  source <(kubectl completion bash | sed   s/kubectl/k/g)\r\n  alias kcd=\'kubectl config set-context $(kubectl   config current-context) --namespace\'\r\n  export CALICO_DATASTORE_TYPE=kubernetes\r\n  export   CALICO_KUBECONFIG=/etc/kubernetes/admin.conf\r\n  # export PATH=$PATH:/root/istio-1.6.2/bin/\r\n  ```\r\n  ```shell\r\n  # 容许tab按键帮助\r\n  yum -y install bash-completion\r\n  bash /usr/share/bash-completion/bash_completion\r\n  bash\r\n  ```\r\n  ```shell\r\n  ### 检测Kubernetes状态 ###\r\n  k get cs\r\n  # scheduler            Unhealthy   Get "http://127.0.0.1:10251/healthz": dial tcp 127.0.0.1:10251: connect:   connection refused   \r\n  # controller-manager   Unhealthy   Get "http://127.0.0.1:10252/healthz": dial tcp 127.0.0.1:10252: connect:   connection refused\r\n  # Solution: need to remove "--port=0" in kube-controller-manager.yaml  kube-scheduler.yaml   /etc/kubernetes/manifests \r\n  systemctl restart kubelet.service\r\n  ```\r\n  ```shell\r\n  ### 资源 ###\r\n  kubectl describe node\r\n  kubectl describe node |grep -E \'((Name|Roles):\\s{6,})|(\\s+(memory|cpu)\\s+[0-9]+\\w{0,2}.+%\\))\'\r\n  ```\r\n  ```shell\r\n  ### 清理 ###\r\n  kubectl drain <node name> --delete-local-data --force --ignore-daemonsets\r\n  kubeadm reset\r\n  cd /etc/cni/net.d/\r\n  # remove /etc/cni/net.d/\r\n  lsof -i :6443|grep -v "PID"|awk \'{print "kill -9",$2}\'|sh\r\n  iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X\r\n  ipvsadm -C\r\n  kubectl delete node <node name>\r\n  ```\r\n  ```shell\r\n  ### 容许Master部署 ###\r\n  kubectl taint nodes --all node-role.kubernetes.io/master-\r\n  ```\r\n  ```shell\r\n  ### Metric ###\r\n  docker pull bitnami/metrics-server:0.6.1\r\n  docker tag bitnami/metrics-server:0.6.1 k8s.gcr.io/metrics-server/metrics-server:v0.6.1\r\n  kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\r\n  ```\r\n  ```yaml\r\n  ### Disable Metric Security ###\r\n  spec:\r\n      containers:\r\n      - args:\r\n        - --cert-dir=/tmp\r\n        - --secure-port=4443\r\n        command:\r\n        - /metrics-server\r\n        - --kubelet-insecure-tls=true\r\n        - --kubelet-preferred-address-types=InternalIP\r\n        image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7\r\n  ```\r\n  ```yaml\r\n  ### Disable Metric Security ###\r\n  args:\r\n    - --cert-dir=/tmp\r\n    - --secure-port=4443\r\n    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname\r\n    - --kubelet-use-node-status-port\r\n    - --kubelet-insecure-tls # 添加这一行（新版本）。\r\n  ```\r\n  ```shell\r\n  ### 检测Metric ###\r\n  kubectl top node\r\n  kubectl top pod\r\n  ```\r\n- ## Install Istio\r\n  ![istio](./svgs/istio.svg)\r\n  ```shell\r\n  ### 安装 ###\r\n  curl -L https://istio.io/downloadIstio | sh -\r\n  istioctl install\r\n  ```\r\n  ```shell\r\n  ### 插件 ###\r\n  kubectl apply -f ./samples/addons/prometheus.yaml\r\n  kubectl apply -f ./samples/addons/grafana.yaml\r\n  kubectl apply -f ./samples/addons/jaeger.yaml\r\n  kubectl apply -f ./samples/addons/kiali.yaml\r\n  ```\r\n  ```shell\r\n  ### 概况 ###\r\n  # istioctl install --set profile=demo\r\n  istioctl profile list\r\n  istioctl profile dump default\r\n  istioctl profile diff default demo\r\n  ```\r\n  ```shell\r\n  ### 验证 ###\r\n  istioctl manifest generate > $HOME/generated-manifest.yaml\r\n  istioctl verify-install -f $HOME/generated-manifest.yaml\r\n  ```\r\n  ```shell\r\n  ### 卸载 ###\r\n  # 所有\r\n  istioctl x uninstall --purge\r\n  # 控制平面\r\n  istioctl x uninstall <your original installation options>\r\n  istioctl manifest generate <your original installation options> | kubectl delete -f -\r\n  # 命名空间\r\n  kubectl delete namespace istio-system\r\n  # \r\n  ```\r\n- ## 安装NFS\r\n  > NFS\r\n  ```shell\r\n  ### 安装 ###\r\n  yum -y install nfs-utils rpcbind\r\n  mkdir -p /data/k8s\r\n  chmod 755 /data/k8s\r\n  vi /etc/exports\r\n  # /etc/exports\r\n  # /data/k8s 192.168.1.0/24(rw,sync,no_root_squash) // /data/k8s *(rw,sync,no_root_squash)\r\n  curl -v telnet://192.168.1.38:2049\r\n  ```\r\n  ```shell\r\n  ### 启动服务 ###\r\n  systemctl enable rpcbind\r\n  systemctl enable nfs\r\n  systemctl start rpcbind\r\n  systemctl start nfs\r\n  rpcinfo -p\r\n  exportfs -r\r\n  exportfs\r\n  ```\r\n  > Kubernetes\r\n  ```shell\r\n  # 重要!!! 需要安装在Master节点（可选）和Worker节点。\r\n  yum install nfs-utils\r\n  ```\r\n  > Test\r\n  ```shell\r\n  ### 客户端 ###\r\n  yum install nfs-common nfs-utils -y\r\n  ```\r\n  ```shell\r\n  ### 挂载 & 卸载 ###\r\n  mount -t nfs 192.168.1.38:/NFS/k8s /mount/nfs # Master和Worker节点，都指向NFS服务器。\r\n  # mount -t nfs 192.168.1.38:/data/k8s /mount/nfs # Master和Worker节点，都指向NFS服务器。\r\n  # mount -t nfs 192.168.1.38:/NFS/nginx /mount/nfs\r\n  curl -v telnet://192.168.1.38:2049\r\n  umount -f -l /mount/data/k8s\r\n  ```\r\n- ## 安装Nginx\r\n  ```shell\r\n  ### 安装 ###\r\n  yum install nginx\r\n  # 设置防火墙\r\n  systemctl status firewalld\r\n  firewall-cmd --zone=public --add-port=80/tcp --permanent\r\n  firewall-cmd --reload\r\n  ```\r\n  ```ini\r\n  #user  nginx;\r\n  #user  root; # Permission Issue.\r\n  #Defines which Linux system user will own and run the Nginx server\r\n  \r\n  worker_processes  1;\r\n  #Referes to single threaded process. Generally set to be equal to the number of CPUs or cores.\r\n  \r\n  #error_log  logs/error.log; #error_log  logs/error.log  notice;\r\n  #Specifies the file where server logs.\r\n  \r\n  #pid        logs/nginx.pid;\r\n  #nginx will write its master process ID(PID).\r\n  \r\n  events {\r\n      worker_connections  1024;\r\n      # worker_processes and worker_connections allows you to calculate maxclients value:\r\n      # max_clients = worker_processes * worker_connections\r\n  }\r\n  \r\n  \r\n  http {\r\n      ssl_certificate /etc/ssl/fewbox.crt;\r\n      ssl_certificate_key /etc/ssl/fewbox.key;\r\n      upstream istio {\r\n          server 172.17.6.3:30815;\r\n          server 172.17.6.4:30815;\r\n          server 172.17.6.5:30815;\r\n      }\r\n      include       mime.types;\r\n      # anything written in /opt/nginx/conf/mime.types is interpreted as if written inside the http { } block\r\n  \r\n      default_type  application/octet-stream;\r\n      #\r\n      fastcgi_connect_timeout 600;\r\n      fastcgi_send_timeout 600;\r\n      fastcgi_read_timeout 600;\r\n      client_max_body_size 200M;\r\n      proxy_connect_timeout       600;\r\n      proxy_send_timeout          600;\r\n      proxy_read_timeout          600;\r\n      proxy_http_version 1.1;\r\n      send_timeout                600;\r\n  \r\n      #log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\r\n      #                  \'$status $body_bytes_sent "$http_referer" \'\r\n      #                  \'"$http_user_agent" "$http_x_forwarded_for"\';\r\n  \r\n      #access_log  logs/access.log  main;\r\n  \r\n      sendfile        on;\r\n      # If serving locally stored static files, sendfile is essential to speed up the server,\r\n      # But if using as reverse proxy one can deactivate it\r\n  \r\n      #tcp_nopush     on;\r\n      # works opposite to tcp_nodelay. Instead of optimizing delays, it optimizes the amount of data sent at   once.\r\n  \r\n      #keepalive_timeout  0;\r\n      keepalive_timeout  65;\r\n      # timeout during which a keep-alive client connection will stay open.\r\n  \r\n      gzip  on;\r\n      gzip_min_length 1k;\r\n      gzip_buffers 4 16k;\r\n      gzip_comp_level 5;\r\n      gzip_types gzip_types text/plain application/javascript application/x-javascript text/css   application/xml text/javascript application/x-httpd-php;\r\n      gzip_http_version 1.1;\r\n      gzip_vary on;\r\n      gzip_proxied any;\r\n      gzip_disable msie6;\r\n      # tells the server to use on-the-fly gzip compression.\r\n  \r\n      server {\r\n          # You would want to make a separate file with its own server block for each virtual domain\r\n          # on your server and then include them.\r\n          listen       80;\r\n          #tells Nginx the hostname and the TCP port where it should listen for HTTP connections.\r\n          # listen 80; is equivalent to listen *:80;\r\n  \r\n          server_name  _;\r\n          # lets you doname-based virtual hosting\r\n  \r\n          charset utf-8;\r\n  \r\n          #access_log  logs/host.access.log  main;\r\n  \r\n          return 302 https://$server_name$request_uri;\r\n  \r\n          #error_page  404              /404.html;\r\n  \r\n          # redirect server error pages to the static page /50x.html\r\n          #\r\n          error_page   500 502 503 504  /50x.html;\r\n          location = /50x.html {\r\n              root   html;\r\n          }\r\n  \r\n          # proxy the PHP scripts to Apache listening on 127.0.0.1:80\r\n          #\r\n          #location ~ \\.php$ {\r\n          #    proxy_pass   http://127.0.0.1;\r\n          #}\r\n  \r\n          # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\r\n          #\r\n          #location ~ \\.php$ {\r\n          #    root           html;\r\n          #    fastcgi_pass   127.0.0.1:9000;\r\n          #    fastcgi_index  index.php;\r\n          #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\r\n          #    include        fastcgi_params;\r\n          #}\r\n  \r\n          # deny access to .htaccess files, if Apache\'s document root\r\n          # concurs with nginx\'s one\r\n          #\r\n          #location ~ /\\.ht {\r\n          #    deny  all;\r\n          #}\r\n      }\r\n  \r\n      server\r\n      {\r\n          listen 443 ssl;\r\n          server_name _;\r\n          proxy_set_header Host  $host;\r\n          proxy_set_header X-Forwarded-For $remote_addr;\r\n          location / {\r\n                  proxy_set_header X-Real-IP $remote_addr;\r\n                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n                  proxy_set_header Host $host:$server_port;\r\n                  proxy_set_header X-NginX-Proxy true;\r\n                  proxy_set_header Upgrade $http_upgrade;\r\n                  proxy_set_header Connection "upgrade";\r\n                  proxy_pass http://istio;\r\n          }\r\n      }\r\n      server\r\n      {\r\n          listen 8443 ssl;\r\n          server_name _;\r\n          proxy_set_header Host $host;\r\n          proxy_set_header X-Forwarded-For $remote_addr;\r\n          location / {\r\n                  proxy_pass https://172.17.6.3:6443; # Your Api Server Address\r\n                  proxy_set_header Upgrade $http_upgrade;\r\n                  proxy_set_header Connection "upgrade";\r\n          }\r\n      }\r\n      server {\r\n          # You would want to make a separate file with its own server block for each virtual domain\r\n          # on your server and then include them.\r\n          listen 7443 ssl;\r\n          #tells Nginx the hostname and the TCP port where it should listen for HTTP connections.\r\n          # listen 80; is equivalent to listen *:80;\r\n  \r\n          server_name  _;\r\n          # lets you doname-based virtual hosting\r\n  \r\n          charset utf-8;\r\n  \r\n          #access_log  logs/host.access.log  main;\r\n  \r\n          location / {\r\n              #The location setting lets you configure how nginx responds to requests for resources within the   server.\r\n              #root   /usr/share/nginx/html;\r\n              #index  index.html index.htm;\r\n              #try_files $uri /index.html;\r\n              proxy_set_header X-Real-IP $remote_addr;\r\n              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n              proxy_set_header Host $host:$server_port;\r\n              proxy_set_header X-NginX-Proxy true;\r\n              proxy_set_header Upgrade $http_upgrade;\r\n              proxy_set_header Connection "upgrade";\r\n              proxy_pass http://istio;\r\n              #proxy_set_header Host  $host;\r\n              #proxy_set_header X-Forwarded-For $remote_addr;\r\n              #proxy_pass http://istio;\r\n          }\r\n  \r\n          #error_page  404              /404.html;\r\n  \r\n          # redirect server error pages to the static page /50x.html\r\n          #\r\n          error_page   500 502 503 504  /50x.html;\r\n          location = /50x.html {\r\n              root   html;\r\n          }\r\n  \r\n          # proxy the PHP scripts to Apache listening on 127.0.0.1:80\r\n          #\r\n          #location ~ \\.php$ {\r\n          #    proxy_pass   http://127.0.0.1;\r\n          #}\r\n  \r\n          # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\r\n          #\r\n          #location ~ \\.php$ {\r\n          #    root           html;\r\n          #    fastcgi_pass   127.0.0.1:9000;\r\n          #    fastcgi_index  index.php;\r\n          #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\r\n          #    include        fastcgi_params;\r\n          #}\r\n  \r\n          # deny access to .htaccess files, if Apache\'s document root\r\n          # concurs with nginx\'s one\r\n          #\r\n          #location ~ /\\.ht {\r\n          #    deny  all;\r\n          #}\r\n      }\r\n  \r\n  \r\n      # another virtual host using mix of IP-, name-, and port-based configuration\r\n      #\r\n      #server {\r\n      #    listen       8000;\r\n      #    listen       somename:8080;\r\n      #    server_name  somename  alias  another.alias;\r\n  \r\n      #    location / {\r\n      #        root   html;\r\n      #        index  index.html index.htm;\r\n      #    }\r\n      #}\r\n  }\r\n  ```\r\n- ## 安装SSL\r\n  > Let\'s Encrypt (https://letsencrypt.org/)\r\n  >\r\n  > Cerbot (https://certbot.eff.org/)\r\n  ```shell\r\n  # 生成带有密码的SSL私钥 (fewbox-pw.key)\r\n  openssl genrsa -des3 -out fewbox-pw.key 2048\r\n  # 查看带有密码的私钥\r\n  openssl rsa -text -in fewbox-pw.key\r\n  # 查看带有密码的私钥\r\n  cat fewbox-pw.key\r\n  # 生成CSR(fewbox.csr)证书签名请求\r\n  openssl req -new -key fewbox-pw.key -out fewbox.csr\r\n  # 查看CSR\r\n  openssl req -text -in fewbox.csr -noout\r\n  # 生成CRT（ fewbox.crt）证书\r\n  openssl x509 -req -days 365 -in fewbox.csr -signkey fewbox-pw.key -out fewbox.crt\r\n  # 生成SSL私钥\r\n  openssl rsa -in fewbox-pw.key -out fewbox.key\r\n  ```\r\n- ## 设置防火墙\r\n  ```shell\r\n  # 查看状态\r\n  systemctl status firewalld\r\n  # 重启\r\n  firewall-cmd --reload\r\n  # 开机启动\r\n  systemctl enable firewalld\r\n  # 禁止开机启动\r\n  sytemctl disable firewalld\r\n  # 启动\r\n  systemctl start firewalld \r\n  # 关闭\r\n  systemctl stop firewalld\r\n  # 查看区域\r\n  firewall-cmd --get-active-zones\r\n  firewall-cmd --get-zone-of-interface=enp0s3\r\n  # 查看拒绝数据包状态\r\n  firewall-cmd --query-panic\r\n  # 拒绝所有数据包\r\n  firewall-cmd --panic-on\r\n  # 容许所有数据包\r\n  firewall-cmd --panic-off\r\n  # 查看端口号\r\n  firewall-cmd --zone=public --list-ports\r\n  # 打开端口\r\n  firewall-cmd --zone=public --add-port=80/tcp --permanent\r\n  firewall-cmd --reload\r\n  # 其他\r\n  # firewall-cmd --zone=public --add-interface=eth0 (FOREVER add \'--permanent\' and then reload firewall)\r\n  # firewall-cmd --set-default-zone=public (Valiable immediately, no need rebot)\r\n  # firewall-cmd --reload orfirewall-cmd --complete-reload (No1 no need diconnect, No2 need disconnect as reboot)\r\n  ```\r\n- ## 安装FRP (可选)\r\n  > 下载\r\n  ```shell\r\n  # https://github.com/fatedier/frp/releases\r\n  # amd64\r\n  wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz\r\n  ```\r\n  > 服务端 (拥有公网IP)\r\n  ```ini\r\n  # https://gofrp.org/docs/examples/ frps.ini\r\n  [common]\r\n  bind_port = 7000\r\n  vhost_http_port = 8080\r\n  vhost_https_port = 8081\r\n  log_file = console\r\n  dashboard_addr = 0.0.0.0\r\n  dashboard_port = 7500\r\n  dashboard_user = fewbox\r\n  dashboard_pwd = {Your Pwd}\r\n  token = {Your Token}\r\n  max_pool_count = 50\r\n  ```\r\n  ```shell\r\n  vi /etc/systemd/system/frps.service\r\n  ```\r\n  ```ini\r\n  [Unit]\r\n  Description = frp server\r\n  After = network.target syslog.target\r\n  Wants = network.target\r\n  \r\n  [Service]\r\n  Type = simple\r\n  ExecStart = /path/to/frps -c /path/to/frps.ini\r\n  \r\n  [Install]\r\n  WantedBy = multi-user.target\r\n  ```\r\n  ```shell\r\n  systemctl start frps\r\n  systemctl stop frps\r\n  systemctl restart frps\r\n  systemctl status frps\r\n  systemctl enable frps\r\n  ```\r\n  > 客户端 (内部机器出口)\r\n  ```shell\r\n  # 拉取镜像\r\n  docker pull fatedier/frpc\r\n  ```\r\n  ```ini\r\n  [common]\r\n  server_addr = {Server IP}\r\n  server_port = 7000\r\n  token = {Your Token}\r\n  \r\n  [web]\r\n  type = http\r\n  local_ip = {Local IP: EG. nginx}\r\n  local_port = 5000\r\n  custom_domains = *.fewbox.com\r\n  ```\r\n  > ### **NAS**\r\n  >\r\n  > Command: -c /frpc/frpc.ini\r\n  >\r\n  > Endpoint: /usr/bin/frpc\r\n  >\r\n  > Share Folder: /DevOps/frpc /frpc\r\n- ## 安装esxi (可选)\r\n  > https://www.dell.com/support/home/en-us/drivers/driversdetails?driverid=gn51y&lwp=rt'}),(0,s.jsx)(_,{anchor:"packing-table",content:"en"==w.m.Language?"- ## Install Packing Table\r\n  ![fewbox](./svgs/fewbox.svg)\r\n  > Domain, NFS, Namespace, Service Account, Cluster Role Binding, Packing Table\r\n  ```shell\r\n  # Install\r\n  . ./fewbox-install.sh\r\n  ```\r\n  > Test\r\n  ```shell\r\n  # Check\r\n  k get ns fewbox-system\r\n  k get sa fewbox\r\n  k get clusterrolebinding fewbox # cluster-admin - fewbox/fewbox-admin\r\n  k get cm packingtable\r\n  k get crd packingtables.fewbox.com\r\n  k get deploy packingtable\r\n  ```":"- ## 安装包装台\r\n  ![fewbox](./svgs/fewbox.svg)\r\n  > 域，NFS，名称空间，服务账户，集群角色绑定，打包表\r\n  ```shell\r\n  # 安装\r\n  . ./fewbox-install.sh\r\n  ```\r\n  > 测试\r\n  ```shell\r\n  # 检测\r\n  k get ns fewbox-system\r\n  k get sa fewbox\r\n  k get clusterrolebinding fewbox # cluster-admin - fewbox/fewbox-admin\r\n  k get cm packingtable\r\n  k get crd packingtables.fewbox.com\r\n  k get deploy packingtable\r\n  ```"}),(0,s.jsx)(_,{anchor:"infrastructure",content:"en"==w.m.Language?"- ## Install Infrastructure\r\n  ![fewbox](./svgs/fewbox.svg)\r\n  > Namespace, Service Account, Cluster Role, Cluster Role Binding, NFS Provisioner, NFS Storage Class\r\n  ```shell\r\n  k create -f ./component/infrastructure/fewbox-infrastructure.yaml\r\n  ```\r\n  > Test\r\n  ```shell\r\n  kcd fewbox\r\n  k get ns fewbox\r\n  k get sa nfs-client-provisioner\r\n  k get clusterrole nfs-client-provisioner-runner\r\n  k get clusterrolebinding run-nfs-client-provisioner-fewbox\r\n  k get deploy nfs-client-provisioner\r\n  k get sc managed-nfs-storage\r\n  ```":"- ## 安装基础设施\r\n  ![fewbox](./svgs/fewbox.svg)\r\n  > 名称空间，服务账户，集群角色，集群角色绑定，NFS供应者，NFS存储类\r\n  ```shell\r\n  k create -f ./component/infrastructure/fewbox-infrastructure.yaml\r\n  ```\r\n  > 测试\r\n  ```shell\r\n  kcd fewbox\r\n  k get ns fewbox\r\n  k get sa nfs-client-provisioner\r\n  k get clusterrole nfs-client-provisioner-runner\r\n  k get clusterrolebinding run-nfs-client-provisioner-fewbox\r\n  k get deploy nfs-client-provisioner\r\n  k get sc managed-nfs-storage\r\n  ```"}),(0,s.jsx)(_,{anchor:"third-party",content:"en"==w.m.Language?"- ## Install ThirdParty\r\n  ![fewbox](./svgs/fewbox.svg)\r\n  > RabbitMQ: CRD, ClusterRole, Service Account, Role Binding, Cluster Role Binding, Deployment, Virtual Service, RMQ\r\n  >\r\n  > MySQL: PVC, Deployment, Service, Destination Rule, Virtual Service\r\n  >\r\n  > Redis: PVC, Deployment, Service, Destination Rule, Virtual Service\r\n  >\r\n  > MongoDB: PVC, Deployment, Service, Destination Rule, Virtual Service\r\n  ```shell\r\n  k create -f ./component/thirdparty/fewbox-thirdparty.yaml\r\n  ```\r\n  > Test\r\n  ```shell\r\n  k get pvc mysql\r\n  k get pvc npmregistry\r\n  k get pvc redis\r\n  k get pv # From PVC\r\n  #k get cm npmregistry\r\n  k get cm rabbitmq-cluster-operator-leader-election  #??\r\n  k get deploy mysql\r\n  k get deploy nfs-client-provisioner\r\n  #k get deploy npmregistry\r\n  k get deploy rabbitmq-cluster-operator\r\n  k get deploy redis\r\n  k get svc mysql\r\n  k get svc npmregistry\r\n  k get svc redis\r\n  k get dr mysql\r\n  #k get dr npmregistry\r\n  k get dr redis\r\n  k get vs mysql\r\n  #k get vs npmregistry\r\n  k get vs redis\r\n  k get vs rabbitmq-client\r\n  k get crd rabbitmqclusters.rabbitmq.com\r\n  k get clusterrole rabbitmq-cluster-operator-role\r\n  k get sa rabbitmq-cluster-operator\r\n  k get rolebinding rabbitmq-cluster-leader-election-rolebinding # rabbitmq-cluster-leader-election-role -   rabbitmq-cluster-operator\r\n  k get clusterrolebinding rabbitmq-cluster-operator-rolebinding-fewbox\r\n  k get vs rabbitmq-client\r\n  k get rmq fewbox\r\n  ```\r\n  ```shell\r\n  # Test MySQL\r\n  k exec -it fewbox-mysql-0 bash\r\n  # SQL >\r\n  # mysqlsh fewbox@localhost --sql\r\n  # set global read_only=0;\r\n  k port-forward service/fewbox-mysql-instances mysql\r\n  ```":"- ## 安装第三方\r\n  ![fewbox](./svgs/fewbox.svg)\r\n  > RabbitMQ: CRD, ClusterRole, Service Account, Role Binding, Cluster Role Binding, Deployment, Virtual Service, RMQ\r\n  >\r\n  > MySQL: PVC, Deployment, Service, Destination Rule, Virtual Service\r\n  >\r\n  > Redis: PVC, Deployment, Service, Destination Rule, Virtual Service\r\n  >\r\n  > MongoDB: PVC, Deployment, Service, Destination Rule, Virtual Service\r\n  ```shell\r\n  vi /etc/kubernetes/manifests/kube-apiserver.yaml\r\n  #Under here:\r\n  #spec:\r\n   #containers:\r\n   #- command:\r\n   #  - kube-apiserver\r\n  #Add this line:\r\n  #- --feature-gates=RemoveSelfLink=false\r\n  kubectl apply -f /etc/kubernetes/manifests/kube-apiserver.yaml\r\n  ```\r\n  > 测试\r\n  ```shell\r\n  k get pvc mysql\r\n  k get pvc npmregistry\r\n  k get pvc redis\r\n  k get pv # From PVC\r\n  #k get cm npmregistry\r\n  k get cm rabbitmq-cluster-operator-leader-election  #??\r\n  k get deploy mysql\r\n  k get deploy nfs-client-provisioner\r\n  #k get deploy npmregistry\r\n  k get deploy rabbitmq-cluster-operator\r\n  k get deploy redis\r\n  k get svc mysql\r\n  k get svc npmregistry\r\n  k get svc redis\r\n  k get dr mysql\r\n  #k get dr npmregistry\r\n  k get dr redis\r\n  k get vs mysql\r\n  #k get vs npmregistry\r\n  k get vs redis\r\n  k get vs rabbitmq-client\r\n  k get crd rabbitmqclusters.rabbitmq.com\r\n  k get clusterrole rabbitmq-cluster-operator-role\r\n  k get sa rabbitmq-cluster-operator\r\n  k get rolebinding rabbitmq-cluster-leader-election-rolebinding # rabbitmq-cluster-leader-election-role -   rabbitmq-cluster-operator\r\n  k get clusterrolebinding rabbitmq-cluster-operator-rolebinding-fewbox\r\n  k get vs rabbitmq-client\r\n  k get rmq fewbox\r\n  ```\r\n  ```shell\r\n  # 测试MySQL\r\n  k exec -it fewbox-mysql-0 bash\r\n  # SQL >\r\n  # mysqlsh fewbox@localhost --sql\r\n  # set global read_only=0;\r\n  k port-forward service/fewbox-mysql-instances mysql\r\n  ```"}),(0,s.jsx)(_,{anchor:"foundation",content:"en"==w.m.Language?"- ## Install Foundation\r\n  ![fewbox](./svgs/fewbox.svg)\r\n  ```shell\r\n  # DB Schema\r\n  k create -f ./component/foundation/fewbox-foundation-schema.yaml\r\n  # App\r\n  k create -f ./component/foundation/fewbox-foundation.yaml\r\n  ```\r\n  > Test\r\n  ```shell\r\n  k get svc -n fewbox\r\n  # auth, mail, payment, realtime, shipping, shipping-app, shipping-gateway\r\n  ```":"- ## 安装基本组件\r\n  ![fewbox](./svgs/fewbox.svg)\r\n  ```shell\r\n  # 数据库模式\r\n  k create -f ./component/foundation/fewbox-foundation-schema.yaml\r\n  # 应用\r\n  k create -f ./component/foundation/fewbox-foundation.yaml\r\n  ```"}),(0,s.jsx)(_,{anchor:"how-to-use",content:"en"==w.m.Language?"# How To Use\r\n## Flow\r\n>![flow](./images/flow.png)\r\n## Roles\r\n>![role](./images/role.png)\r\n##\r\n> Coming Soon\r\n> \r\n> [**Conact Us**](./service)":"# 怎样使用\r\n> 即将开放\r\n> \r\n> [**联系我们**](./service)"}),(0,s.jsx)(_,{anchor:"about-us",content:"en"==w.m.Language?"# About Us\r\nFounded by an older guy who has worked as an architect for large & startup companies (Lenovo, JD, BoostSolutions), but now I am creating a small and beautiful company.\r\n\r\nWe’re building the smart kit for customers who want to be smart.":"# 关于我们\r\n由一个曾在大型公司和创业公司（联想、JD、BoostSolutions）担任过架构师的老家伙创立，但现在我正在创建一个小而美的公司。\r\n\r\n我们正在为那些想要变得聪明的客户建立智能套件。"})]});return(0,s.jsx)(c.Z,{titleId:"Label.DocumentPageTitle",descriptionId:"Label.DocumentPageDescription",keywordsId:"Label.DocumentPageKeywords",authorId:"Label.PageAuthor",children:(0,s.jsxs)(a.U.Components.VSection,{padding:m.A.SectionPadding,children:[(0,s.jsx)(a.U.Components.Display,{category:a.U.Components.DisplayCategory.Hidden,type:a.U.Components.DisplayType.Down,breakpoint:a.U.Components.BreakpointType.Large,children:(0,s.jsxs)(a.U.Components.XAutoLeft,{gap:"1em",cross:a.U.Components.XCrossType.Top,children:[e,(0,s.jsx)(a.U.Components.VBoundary,{width:"48em",children:(0,s.jsx)(a.U.Components.Position,{category:a.U.Components.PositionCategory.Window,type:a.U.Components.PositionType.Right,children:(0,s.jsxs)(a.U.Components.X,{gap:"2em",children:[(0,s.jsx)(a.U.Components.VLine,{category:a.U.Components.LineCategory.Vertical,backgroundColor:a.U.Components.ColorType.Dark,width:"1px",height:"24em"}),(0,s.jsxs)(a.U.Components.Y,{gap:"1.6em",children:[(0,s.jsx)(d(),{href:"#getting-started",children:(0,s.jsx)(a.U.Components.VLabel,{size:v,weight:S,category:a.U.Components.LabelCategory.Div,width:C,frontColor:R,caption:(0,s.jsx)(l.Z,{id:"Label.GettingStartedAnchor"})})}),(0,s.jsx)(d(),{href:"#prerequisites",children:(0,s.jsx)(a.U.Components.VLabel,{size:v,weight:S,category:a.U.Components.LabelCategory.Div,width:C,frontColor:R,caption:(0,s.jsx)(l.Z,{id:"Label.PrerequisitesAnchor"})})}),(0,s.jsx)(d(),{href:"#packing-table",children:(0,s.jsx)(a.U.Components.VLabel,{size:v,weight:S,category:a.U.Components.LabelCategory.Div,width:C,frontColor:R,caption:(0,s.jsx)(l.Z,{id:"Label.PackingTableAnchor"})})}),(0,s.jsx)(d(),{href:"#infrastructure",children:(0,s.jsx)(a.U.Components.VLabel,{size:v,weight:S,category:a.U.Components.LabelCategory.Div,width:C,frontColor:R,caption:(0,s.jsx)(l.Z,{id:"Label.InfrastructureAnchor"})})}),(0,s.jsx)(d(),{href:"#third-party",children:(0,s.jsx)(a.U.Components.VLabel,{size:v,weight:S,category:a.U.Components.LabelCategory.Div,width:C,frontColor:R,caption:(0,s.jsx)(l.Z,{id:"Label.ThirdPartyAnchor"})})}),(0,s.jsx)(d(),{href:"#foundation",children:(0,s.jsx)(a.U.Components.VLabel,{size:v,weight:S,category:a.U.Components.LabelCategory.Div,width:C,frontColor:R,caption:(0,s.jsx)(l.Z,{id:"Label.FoundationAnchor"})})}),(0,s.jsx)(d(),{href:"#how-to-use",children:(0,s.jsx)(a.U.Components.VLabel,{size:v,weight:S,category:a.U.Components.LabelCategory.Div,width:C,frontColor:R,caption:(0,s.jsx)(l.Z,{id:"Label.HowToUseAnchor"})})}),(0,s.jsx)(d(),{href:"#about-us",children:(0,s.jsx)(a.U.Components.VLabel,{size:v,weight:S,category:a.U.Components.LabelCategory.Div,width:C,frontColor:R,caption:(0,s.jsx)(l.Z,{id:"Label.AboutUsAnchor"})})})]})]})})})]})}),(0,s.jsx)(a.U.Components.Display,{category:a.U.Components.DisplayCategory.Hidden,type:a.U.Components.DisplayType.Up,breakpoint:a.U.Components.BreakpointType.Large,children:e})]})})}}let E=e=>{let{}=e;return{}};var $=(0,x.$j)(E,{})(I)}},function(e){e.O(0,[121,796,774,888,179],function(){return e(e.s=74950)}),_N_E=e.O()}]);